using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using FastApi.EF.Tests.Fixtures;
using FastApi.EF.Tests.Models;
using FastApi.EF.Tests.Seeds;

namespace FastApi.EF.Tests;

public class WriteTests : BaseEfTest
{
    private Agg[] PreCreatedAggs => Fixture.Seed.Aggs;

    public WriteTests()
        : base(new SeededInMemorySqliteFixture<DbSeed>()) { }

    [Fact]
    public async Task AddOneLine()
    {
        Agg item = new Agg() { Text = "Some Text" };

        await using (var context = GetContext())
        {
            item = (await context.SaveNewAsync(item))!;
        }

        item.Id.Should().NotBe(0, "Id should be autogenerated");

        await using (var context = GetContext())
        {
            var dbItem = await context.Aggs.SingleOrDefaultAsync(a => a.Id == item.Id);
            dbItem.Should().BeEquivalentTo(item);
        }
    }

    [Fact]
    public async Task SaveUpdate()
    {
        var itemToUpdate = PreCreatedAggs[PreCreatedAggs.Length / 2];
        itemToUpdate.Text += "New text";

        await using (var context = GetContext())
        {
            await context.SaveUpdateAsync(itemToUpdate);
        }

        await using (var context = GetContext())
        {
            var found = await context.Aggs.FirstOrDefaultAsync(a => a.Id == itemToUpdate.Id);
            found.Should().BeEquivalentTo(itemToUpdate);
        }
    }

    [Fact]
    public async Task Delete()
    {
        var itemToDelete = PreCreatedAggs[PreCreatedAggs.Length / 2];

        await using (var context = GetContext())
        {
            await context.DeleteAsync(itemToDelete);
        }

        await using (var context = GetContext())
        {
            var found = await context.Aggs.FirstOrDefaultAsync(a => a.Id == itemToDelete.Id);
            found.Should().BeNull();
        }
    }
}